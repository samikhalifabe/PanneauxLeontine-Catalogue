#!/usr/bin/env node

// Script simple pour tester la connexion √† Neon
// Usage: npm run test-db-simple

const { Pool } = require('pg')

async function testNeonConnection() {
  // Lecture des variables d'environnement
  require('dotenv').config()
  
  const provider = process.env.DATABASE_PROVIDER || 'supabase'
  console.log('üîç Test de connexion √† la base de donn√©es...\n')
  console.log(`üìä Provider configur√©: ${provider}`)
  
  if (provider !== 'neon') {
    console.log('‚ö†Ô∏è  Ce script teste uniquement Neon. Pour Supabase, utilisez l\'ancien syst√®me.')
    console.log('üí° Pour tester Neon, d√©finissez DATABASE_PROVIDER=neon dans votre .env')
    return
  }
  
  const connectionString = process.env.DATABASE_URL
  
  if (!connectionString) {
    console.error('‚ùå DATABASE_URL manquant dans le fichier .env')
    console.error('üí° Ajoutez: DATABASE_URL=postgresql://neondb_owner:npg...@ep-...neon.tech/neondb?sslmode=require')
    process.exit(1)
  }
  
  console.log(`üîó URL de connexion: ${connectionString.substring(0, 50)}...`)
  
  // Test de connexion
  const pool = new Pool({
    connectionString,
    ssl: { rejectUnauthorized: false }
  })
  
  try {
    console.log('\n‚è≥ Connexion en cours...')
    
    // Test de base
    const client = await pool.connect()
    console.log('‚úÖ Connexion Neon √©tablie !')
    
    // Test des tables
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `)
    
    console.log(`\nüìã Tables trouv√©es: ${tablesResult.rows.length}`)
    tablesResult.rows.forEach(row => {
      console.log(`   ‚Ä¢ ${row.table_name}`)
    })
    
    // Test des produits
    const productsResult = await client.query('SELECT COUNT(*) as count FROM products')
    console.log(`\nüì¶ ${productsResult.rows[0].count} produits dans la base`)
    
    // Test des cat√©gories
    const categoriesResult = await client.query('SELECT COUNT(*) as count FROM categories')
    console.log(`üìÇ ${categoriesResult.rows[0].count} cat√©gories dans la base`)
    
    // √âchantillon de produits
    const sampleResult = await client.query(`
      SELECT 
        p.id,
        p.nom_produit, 
        p.prix_final_ttc,
        STRING_AGG(c.name, ', ') as categories
      FROM products p
      LEFT JOIN product_categories pc ON p.id = pc.product_id
      LEFT JOIN categories c ON pc.category_id = c.id
      GROUP BY p.id, p.nom_produit, p.prix_final_ttc
      ORDER BY p.nom_produit
      LIMIT 5
    `)
    
    console.log('\nüéØ √âchantillon de produits:')
    sampleResult.rows.forEach(row => {
      const price = row.prix_final_ttc ? `${row.prix_final_ttc}‚Ç¨` : 'Prix non d√©fini'
      const categories = row.categories || 'Aucune cat√©gorie'
      console.log(`   ‚Ä¢ ${row.nom_produit} (${price}) ‚Üí ${categories}`)
    })
    
    client.release()
    console.log('\nüéâ Test termin√© avec succ√®s ! Votre base Neon est op√©rationnelle.')
    
  } catch (error) {
    console.error('\n‚ùå Erreur de connexion:')
    console.error(error.message)
    
    if (error.code === 'ENOTFOUND') {
      console.error('\nüí° L\'URL de connexion semble incorrecte. V√©rifiez:')
      console.error('   - Le nom d\'h√¥te dans DATABASE_URL')
      console.error('   - Que votre projet Neon est actif')
    } else if (error.code === '28P01') {
      console.error('\nüí° Erreur d\'authentification. V√©rifiez:')
      console.error('   - Le nom d\'utilisateur et mot de passe dans DATABASE_URL')
      console.error('   - Que les credentials sont corrects')
    } else {
      console.error('\nüí° Consultez la documentation Neon pour plus d\'aide')
    }
    
    process.exit(1)
  } finally {
    await pool.end()
  }
}

testNeonConnection() 